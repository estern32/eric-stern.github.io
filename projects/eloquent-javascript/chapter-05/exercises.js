// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arrays) {
  //reduce
  let flattened = arrays.reduce(
      function(accumulator, currentValue) {
          //concat
          return accumulator.concat(currentValue);
      }
  )
  return flattened;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(start, testFunc, updated, body) {
  for (let value = start; testFunc(value); value = updated(value)) {
    body(value);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
//loop version
function every(array, test) {
  for (let element of array) {
    if (!test(element)) return false;
  }
  return true;
}
//some version
function everySome(array, test) {
  return !array.some(function(element) {!test(element)});
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  //create variable ltr and initialize it as an empty array
  let ltr = [];
  //create variable rtl and initialize it as an empty array
  let rtl = [];

  //iterate input string with for loop
  for (let i = 0; i < string.length; i++) {
    //create a variable script and assign it the result of invoking characterScript on the current character's char code
    let script = characterScript(string.charCodeAt(i)); //let script = {...}
    if (script !== null) {
      if (script.direction === 'ltr') {
        ltr.push(script);
      } else {
        rtl.push(script);
      }
    }
  }
  if (ltr.length > rtl.length) {
    return 'ltr';
  } else {
    return 'rtl';
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
